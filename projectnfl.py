# -*- coding: utf-8 -*-
"""projectNFL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18XE-sYL_TAEEa9pJMXINt-GvHt4Lx1bi

# **Analyzing the 2022 NFL Season**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

with open ('plays.csv','r') as file:
    df = pd.read_csv(file)

df['offenseFormation'] = df['offenseFormation'].str.strip().str.lower()

valid_qbs_list = {
    "J.Allen", "T.Tagovailoa", "M.Jones", "Z.Wilson", "L.Jackson", "J.Burrow",
    "J.Brisset", "M.Trubisky", "D.Mills", "M.Ryan", "T.Lawrence", "R.Tannehill",
    "R.Wilson", "P.Mahomes", "D.Carr", "J.Herbert", "D.Prescott", "D.Jones",
    "J.Hurts", "C.Wentz", "J.Fields", "J.Goff", "A.Rodgers", "K.Cousins",
    "B.Mayfield", "A.Dalton", "T.Brady", "K.Murray", "M.Stafford",
    "J.Garoppolo", "Geno Smith"
}

def extract_qb_name(description):
    for qb in valid_qbs_list:
        if qb in description:
            return qb
    return None

df['qb_name'] = df['playDescription'].apply(extract_qb_name)

valid_formations = {"No Huddle", "Shotgun"}

def exttract_formation(description):
    for formation in valid_formations:
        if formation in description:
            return formation
    return None

df['offenseFormation'] = df['playDescription'].apply(exttract_formation)


shotgun=df[df['offenseFormation']=='Shotgun']
shotgun=shotgun[shotgun['qb_name'].isin(valid_qbs_list)]
shotgun_grouoped=shotgun.groupby('qb_name')['playResult'].mean()
shotgun_sorted=shotgun_grouoped.sort_values(ascending=False)
shotgun_top_performers=shotgun_sorted.head(10)
print("Shotgun Top QB Performers")
print(shotgun_top_performers)
shotgun_all_qbs=shotgun.groupby('qb_name')['playResult'].mean().sort_values(ascending=False)


Categories = shotgun_top_performers.index
Values = shotgun_top_performers.values
plt.bar(  Categories, Values)
plt.title('Shotgun Top 10 QB Performers')
plt.xlabel('QB')
plt.ylabel('Average Play Result')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

Categories = shotgun_all_qbs.index
Values = shotgun_all_qbs.values
plt.bar(  Categories, Values)
plt.title('Shotgun All QB Performers')
plt.xlabel('QB')
plt.ylabel('Average Play Result')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

no_huddle=df[df['offenseFormation']=='No Huddle']
no_huddle=no_huddle[no_huddle['qb_name'].isin(valid_qbs_list)]
no_huddle_grouped=no_huddle.groupby('qb_name')['playResult'].mean()
no_huddle_sorted=no_huddle_grouped.sort_values(ascending=False)
no_huddle_top_performers=no_huddle_sorted.head(10)
print("No Huddle Top QB Performers")
print(no_huddle_top_performers)
no_huddle_all_qbs = no_huddle_grouped.reindex(valid_qbs_list).fillna(0).sort_values(ascending=False)

Categories = no_huddle_top_performers.index
Values = no_huddle_top_performers.values
plt.bar(  Categories, Values)
plt.title('No Huddle Top 10 QB Performers')
plt.xlabel('QB')
plt.ylabel('Average Play Result')
plt.xticks(rotation=45)
plt.show()

Categories = no_huddle_all_qbs.index
Values = no_huddle_all_qbs.values
plt.bar(  Categories, Values)
plt.title('No Huddle All QB Performers')
plt.xlabel('QB')
plt.ylabel('Average Play Result')
plt.xticks(rotation=90)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt


with open('konbert-output-d1a66dc5.csv', 'r') as file:
    df = pd.read_csv(file)

valid_ball_carriers = {
    "James Conner", "Cordarrelle Patterson", "J.K. Dobbins", "Devin Singletary",
    "Christian McCaffrey", "David Montgomery", "Joe Mixon", "Nick Chubb",
    "Ezekiel Elliott", "Javonte Williams", "D'Andre Swift", "Aaron Jones",
    "Dameon Pierce", "Jonathan Taylor", "Travis Etienne", "Clyde Edwards-Helaire",
    "Josh Jacobs", "Austin Ekeler", "Cam Akers", "Raheem Mostert", "Dalvin Cook",
    "Damien Harris", "Alvin Kamara", "Saquon Barkley", "Breece Hall", "Miles Sanders",
    "Najee Harris", "Elijah Mitchell", "Rashaad Penny", "Leonard Fournette",
    "Derrick Henry", "Antonio Gibson"
}
# list of starting runningbacks from the start of the 2022 NFL season

six = df[df['defendersInTheBox'] == 6] # sorting the data to show only when 6 defend
six = six[six['ballCarrierDisplayName'].isin(valid_ball_carriers)]
six_grouped = six.groupby('ballCarrierDisplayName')['playResult'].mean()
six_sorted = six_grouped.sort_values(ascending=False)
six_defenders_top_performers = six_sorted.head(5)
six_team_averages = six.groupby('possessionTeam')['playResult'].mean().sort_values(ascending=False)
print("Top 5 Players with 6 Defenders in the Box:")
print(six_defenders_top_performers)
print("Team Averages for 6 Defenders in the Box:")
print(six_team_averages)

Categories = six_team_averages.index
Values = six_team_averages.values
plt.bar(Categories, Values)
plt.title('Average Play Results for 6 Defenders in the Box')
plt.xlabel('Team')
plt.ylabel('Average Play Result')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()


seven = df[df['defendersInTheBox'] == 7]
seven = seven[seven['ballCarrierDisplayName'].isin(valid_ball_carriers)]
seven_grouped = seven.groupby('ballCarrierDisplayName')['playResult'].mean()
seven_sorted = seven_grouped.sort_values(ascending=False)
seven_defenders_top_performers = seven_sorted.head(5)
seven_team_averages = seven.groupby('possessionTeam')['playResult'].mean().sort_values(ascending=False)
print("Top 5 Players with 7 Defenders in the Box:")
print(seven_defenders_top_performers)
print("Team Averages for 7 Defenders in the Box:")
print(seven_team_averages)

Categories = seven_team_averages.index
Values = seven_team_averages.values
plt.bar(Categories, Values)
plt.title('Average Play Results for 7 Defenders in the Box')
plt.xlabel('Team')
plt.ylabel('Average Play Result')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()


eight = df[df['defendersInTheBox'] == 8]
eight = eight[eight['ballCarrierDisplayName'].isin(valid_ball_carriers)]
eight_grouped = eight.groupby('ballCarrierDisplayName')['playResult'].mean()
eight_sorted = eight_grouped.sort_values(ascending=False)
eight_defenders_top_performers = eight_sorted.head(5)
eight_team_averages = eight.groupby('possessionTeam')['playResult'].mean().sort_values(ascending=False)
print("Top 5 Players with 8 Defenders in the Box:")
print(eight_defenders_top_performers)
print("Team Averages for 8 Defenders in the Box:")
print(eight_team_averages)

Categories = eight_team_averages.index
Values = eight_team_averages.values
plt.bar(Categories, Values)
plt.title('Average Play Results for 8 Defenders in the Box')
plt.xlabel('Team')
plt.ylabel('Average Play Result')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

from google.colab import drive
drive.mount('/content/drive')
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from google.colab import files

# Upload the file
uploaded = files.upload()


with open ('plays.csv','r') as file:
    plays = pd.read_csv(file)

print(plays.head)

plays['playType'] = plays['playDescription'].apply(lambda x: 'pass' if 'pass' in x.lower() else 'run')
print(plays)

pass_plays = plays[plays['playDescription'].str.contains('pass', case=False, na=False)]

quarter_1_pass_plays = pass_plays[pass_plays['quarter'] == 1]

print(quarter_1_pass_plays)

reciever_names = [
    "Justin Jefferson",
    "Tyreek Hill",
    "Travis Kelce",
    "Stefon Diggs",
    "Austin Ekeler",
    "CeeDee Lamb",
    "Amon-Ra St. Brown",
    "Chris Godwin",
    "Davante Adams",
    "Michael Pittman",
    "DeVonta Smith",
    "DK Metcalf",
    "A.J. Brown",
    "Ja'Marr Chase",
    "T.J. Hockenson",
    "Diontae Johnson",
    "Christian McCaffrey",
    "Christian Kirk",
    "Tyler Lockett",
    "Garrett Wilson",
    "Zay Jones",
    "Brandon Aiyuk",
    "Amari Cooper",
    "JuJu Smith-Schuster",
    "Mike Evans",
    "Terry McLaurin",
    "Cooper Kupp",
    "Jaylen Waddle",
    "Tee Higgins",
    "Mark Andrews",
    "Evan Engram",
    "Leonard Fournette",
    "Tyler Higbee",
    "Drake London",
    "Chris Olave",
    "Josh Palmer",
    "Adam Thielen",
    "Rhamondre Stevenson",
    "Marquise Brown",
    "Jerry Jeudy",
    "Jakobi Meyers",
    "Keenan Allen",
    "DeAndre Hopkins",
    "Curtis Samuel",
    "Courtland Sutton",
    "Parris Campbell",
    "Pat Freiermuth",
    "DJ Moore",
    "Mike Williams",
    "Donovan Peoples-Jones"
]
recievers_first_quarter_recieving_stats = quarter_1_pass_plays[quarter_1_pass_plays['ballCarrierDisplayName'].isin(reciever_names)]
print(recievers_first_quarter_recieving_stats)



pair_counts = recievers_first_quarter_recieving_stats.groupby(['gameId', 'ballCarrierDisplayName']).size().reset_index(name='Count')
print(pair_counts)
print(pair_counts['Count'].mean() * 116/119)
print(pair_counts['Count'].median())
print(pair_counts['ballCarrierDisplayName'])
amount_of_appearances_from_each_player = pair_counts['ballCarrierDisplayName'].value_counts()
print(amount_of_appearances_from_each_player)

high_pair_counts = pair_counts[pair_counts['Count'] >= 2]


print(high_pair_counts)

print(high_pair_counts['Count'].sum())
print(len(high_pair_counts))

not_quarter_1_pass_plays = pass_plays[pass_plays['quarter'] != 1]
recievers_not_first_quarter_recieving_stats = not_quarter_1_pass_plays[not_quarter_1_pass_plays['ballCarrierDisplayName'].isin(reciever_names)]
other_pair_counts = recievers_not_first_quarter_recieving_stats.groupby(['gameId', 'ballCarrierDisplayName']).size().reset_index(name='Count')
print(other_pair_counts)
total_not_quarter_1_receptions = other_pair_counts.groupby(['ballCarrierDisplayName'])['Count'].sum()
print(total_not_quarter_1_receptions)
game_id_pair_counts = other_pair_counts[(other_pair_counts['gameId'].isin(high_pair_counts['gameId'])) &
                                  (other_pair_counts['ballCarrierDisplayName'].isin(high_pair_counts['ballCarrierDisplayName']))]

print(game_id_pair_counts)

game_id_pair_counts = high_pair_counts.merge(other_pair_counts, on=['gameId', 'ballCarrierDisplayName'], how='inner')
print(game_id_pair_counts)
mean_x = game_id_pair_counts['Count_x'].mean()
mean_y = game_id_pair_counts['Count_y'].mean()
print(mean_x, mean_y/3)
plt.hist([mean_x,mean_y/3])
plt.xlabel("mean receptions for quarters(1 vs 2-4)")

print(game_id_pair_counts)
average_receptions_after_good_1st = game_id_pair_counts.groupby("ballCarrierDisplayName")["Count_y"].mean()/3
print(average_receptions_after_good_1st.index)

value_per_quarter = {

    'A.J. Brown': 1.04,
    'Adam Thielen': 1.17,
    'Amari Cooper': 1.08,
    'Amon-Ra St. Brown': 1.29,
    'Austin Ekeler': 1.96,
    'Brandon Aiyuk': 1.29,
    'CeeDee Lamb': 1.25,
    'Chris Godwin': 1.33,
    'Chris Olave': 1.46,
    'Christian Kirk': 1.38,
    'Christian McCaffrey': 1.33,
    'Cooper Kupp': 1.96,
    'Courtland Sutton': 1.21,
    'Curtis Samuel': 1.42,
    'DK Metcalf': 0.96,
    'Davante Adams': 1.08,
    'DeAndre Hopkins': 1.58,
    'DeVonta Smith': 1.08,
    'Diontae Johnson': 1.42,
    'Donovan Peoples-Jones': 0.95,
    'Drake London': 1.12,
    'Evan Engram': 1.08,
    'Garrett Wilson': 1.33,
    "Ja'Marr Chase": 1.43,
    'Jakobi Meyers': 1.29,
    'Jaylen Waddle': 1.29,
    'Jerry Jeudy': 0.88,
    'Josh Palmer': 1.25,
    'JuJu Smith-Schuster': 1.38,
    'Justin Jefferson': 1.58,
    'Keenan Allen': 0.5,
    'Leonard Fournette': 1.54,
    'Mark Andrews': 1.25,
    'Marquise Brown': 1.43,
    'Michael Pittman': 1.79,
    'Mike Evans': 1.21,
    'Mike Williams': 1.0,
    'Parris Campbell': 1.0,
    'Pat Freiermuth': 0.96,
    'Stefon Diggs': 1.46,
    'T.J. Hockenson': 1.12,
    'Tee Higgins': 1.25,
    'Terry McLaurin': 1.46,
    'Travis Kelce': 1.54,
    'Tyler Higbee': 1.12,
    'Tyler Lockett': 1.07,
    'Tyreek Hill': 2.22
}



value_per_quarter_after_good_games = dict(zip(average_receptions_after_good_1st.index, average_receptions_after_good_1st))
print(value_per_quarter)
print(len(value_per_quarter))
print(len(game_id_pair_counts))
print(len(value_per_quarter_after_good_games))
print(value_per_quarter_after_good_games)
player_names = value_per_quarter.keys()

value_per_quarter_values = [value_per_quarter[k] for k in player_names]
value_per_quarter_after_good_games_values= [value_per_quarter_after_good_games[k] for k in value_per_quarter_after_good_games]

x = np.arange(len(player_names))
width = 0.1

# Create the bar plots
print(value_per_quarter_after_good_games_values.index)
print(len(value_per_quarter_after_good_games_values))
plt.bar(x - width/2, value_per_quarter_values, width, label='Dict1')
plt.bar(x + width/2, value_per_quarter_after_good_games_values, width, label='Dict2')

plt.xlabel("Player id")
plt.ylabel("Average receptions per quarter")
plt.legend(['Season average', 'After Strong 1st Quarter'])

plt.tight_layout()
plt.show()
difference = 0
for i in range(25):
  if value_per_quarter_values[i] > value_per_quarter_after_good_games_values[i]:
    difference+=1
  else:
    difference-=1
good_performances_without_good_1st =   25 + 0.5*(difference-1)
good_performances_with_good_1st = 49 - good_performances_without_good_1st
print(f"{good_performances_without_good_1st} people performed better without a good first quarter")
print(f"{good_performances_with_good_1st} people performed better with a good first quarter")

